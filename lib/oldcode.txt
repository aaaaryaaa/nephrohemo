// class dashboard_screen extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return Padding(
//       padding: EdgeInsets.all(16.0),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: <Widget>[
//           Text(
//             'Machine Availability',
//             style: Theme.of(context).textTheme.titleLarge?.copyWith(
//               color: Colors.blueAccent,
//               fontWeight: FontWeight.bold,
//             ),
//           ),
//           SizedBox(height: 20),
//           machine_card(
//             available_machines_count: 8,
//             total_machines_count: 10,
//             available_machines: [
//               {'name': 'Machine 1', 'location': 'Room 101'},
//               {'name': 'Machine 2', 'location': 'Room 102'},
//               {'name': 'Machine 3', 'location': 'Room 103'},
//               {'name': 'Machine 4', 'location': 'Room 104'},
//               {'name': 'Machine 5', 'location': 'Room 105'},
//               {'name': 'Machine 6', 'location': 'Room 106'},
//               {'name': 'Machine 7', 'location': 'Room 107'},
//               {'name': 'Machine 8', 'location': 'Room 108'},
//             ],
//           ),
//         ],
//       ),
//     );
//   }
// }

// class machine_card extends StatelessWidget {
//   final int available_machines_count;
//   final int total_machines_count;
//   final List<Map<String, String>> available_machines;

//   machine_card({
//     required this.available_machines_count,
//     required this.total_machines_count,
//     required this.available_machines,
//   });

//   @override
//   Widget build(BuildContext context) {
//     return Card(
//       elevation: 5,
//       shape: RoundedRectangleBorder(
//         borderRadius: BorderRadius.circular(15.0),
//       ),
//       child: Padding(
//         padding: EdgeInsets.all(16.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: <Widget>[
//             Text(
//               'Total Machines: $total_machines_count',
//               style: TextStyle(
//                 fontSize: 18,
//                 fontWeight: FontWeight.bold,
//               ),
//             ),
//             SizedBox(height: 10),
//             Text(
//               'Free Machines: $available_machines_count',
//               style: TextStyle(
//                 fontSize: 16,
//                 color: Colors.green,
//               ),
//             ),
//             SizedBox(height: 10),
//             Divider(),
//             ...available_machines.map((machine) => Padding(
//               padding: EdgeInsets.symmetric(vertical: 4.0),
//               child: Row(
//                 children: [
//                   Icon(Icons.local_hospital, color: Colors.teal),
//                   SizedBox(width: 8),
//                   Text('${machine['name']} - ${machine['location']}'),
//                 ],
//               ),
//             )),
//           ],
//         ),
//       ),
//     );
//   }
// }

// class DashboardScreen extends StatefulWidget {
//   @override
//   _DashboardScreenState createState() => _DashboardScreenState();
// }

// class _DashboardScreenState extends State<DashboardScreen> {
//   FirestoreService _firestoreService = FirestoreService();
//   List<Map<String, dynamic>> availableMachines = [];

//   @override
//   void initState() {
//     super.initState();
//     _fetchMachines();
//   }

//   // Fetch machines from Firestore and update state
//   void _fetchMachines() async {
//     List<Map<String, dynamic>> machines = await _firestoreService.fetchMachines();
//     setState(() {
//       availableMachines = machines;
//     });
//   }

//   // Add machine using FirestoreService
//   void _addMachine(String name, String location) async {
//     await _firestoreService.addMachine(name, location);
//     _fetchMachines(); // Refresh the machines list
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Padding(
//       padding: EdgeInsets.all(16.0),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: <Widget>[
//           Text(
//             'Machine Availability',
//             style: Theme.of(context).textTheme.titleLarge?.copyWith(
//               color: Colors.blueAccent,
//               fontWeight: FontWeight.bold,
//             ),
//           ),
//           SizedBox(height: 20),
//           Card(
//             elevation: 5,
//             shape: RoundedRectangleBorder(
//               borderRadius: BorderRadius.circular(15.0),
//             ),
//             child: Padding(
//               padding: EdgeInsets.all(16.0),
//               child: Column(
//                 crossAxisAlignment: CrossAxisAlignment.start,
//                 children: <Widget>[
//                   Text(
//                     'Total Machines: ${availableMachines.length}',
//                     style: TextStyle(
//                       fontSize: 18,
//                       fontWeight: FontWeight.bold,
//                     ),
//                   ),
//                   SizedBox(height: 10),
//                   Text(
//                     'Free Machines: ${availableMachines.length}', // Adjust according to your logic
//                     style: TextStyle(
//                       fontSize: 16,
//                       color: Colors.green,
//                     ),
//                   ),
//                   SizedBox(height: 10),
//                   Divider(),
//                   availableMachines.isNotEmpty
//                       ? ListView.builder(
//                           shrinkWrap: true,
//                           physics: NeverScrollableScrollPhysics(),
//                           itemCount: availableMachines.length,
//                           itemBuilder: (context, index) {
//                             return Padding(
//                               padding: EdgeInsets.symmetric(vertical: 4.0),
//                               child: Row(
//                                 children: [
//                                   Icon(Icons.local_hospital, color: Colors.teal),
//                                   SizedBox(width: 8),
//                                   Text('${availableMachines[index]['name']} - ${availableMachines[index]['location']}'),
//                                 ],
//                               ),
//                             );
//                           },
//                         )
//                       : Center(child: CircularProgressIndicator()), // Show a loader while fetching
//                 ],
//               ),
//             ),
//           ),
//           SizedBox(height: 20),
//           ElevatedButton(
//             onPressed: () => _showAddMachineDialog(context),
//             child: Text('Add Machine'),
//           ),
//         ],
//       ),
//     );
//   }

//   // Dialog to add new machine
//   void _showAddMachineDialog(BuildContext context) {
//     final _nameController = TextEditingController();
//     final _locationController = TextEditingController();

//     showDialog(
//       context: context,
//       builder: (BuildContext context) {
//         return AlertDialog(
//           title: Text('Add New Machine'),
//           content: Column(
//             mainAxisSize: MainAxisSize.min,
//             children: <Widget>[
//               TextField(
//                 controller: _nameController,
//                 decoration: InputDecoration(labelText: 'Machine Name'),
//               ),
//               TextField(
//                 controller: _locationController,
//                 decoration: InputDecoration(labelText: 'Location'),
//               ),
//             ],
//           ),
//           actions: <Widget>[
//             TextButton(
//               onPressed: () {
//                 String name = _nameController.text;
//                 String location = _locationController.text;
//                 if (name.isNotEmpty && location.isNotEmpty) {
//                   _addMachine(name, location);
//                   Navigator.of(context).pop();
//                 }
//               },
//               child: Text('Add'),
//             ),
//             TextButton(
//               onPressed: () {
//                 Navigator.of(context).pop();
//               },
//               child: Text('Cancel'),
//             ),
//           ],
//         );
//       },
//     );
//   }
// }


// class MachineCard extends StatelessWidget {
//   final int availableMachinesCount;
//   final int totalMachinesCount;
//   final List<Map<String, String>> availableMachines;

//   MachineCard({
//     required this.availableMachinesCount,
//     required this.totalMachinesCount,
//     required this.availableMachines,
//   });

//   @override
//   Widget build(BuildContext context) {
//     return Card(
//       elevation: 5,
//       shape: RoundedRectangleBorder(
//         borderRadius: BorderRadius.circular(15.0),
//       ),
//       child: Padding(
//         padding: EdgeInsets.all(16.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: <Widget>[
//             Text(
//               'Total Machines: $totalMachinesCount',
//               style: TextStyle(
//                 fontSize: 18,
//                 fontWeight: FontWeight.bold,
//               ),
//             ),
//             SizedBox(height: 10),
//             Text(
//               'Free Machines: $availableMachinesCount',
//               style: TextStyle(
//                 fontSize: 16,
//                 color: Colors.green,
//               ),
//             ),
//             SizedBox(height: 10),
//             Divider(),
//             ...availableMachines.map((machine) => Padding(
//               padding: EdgeInsets.symmetric(vertical: 4.0),
//               child: Row(
//                 children: [
//                   Icon(Icons.local_hospital, color: Colors.teal),
//                   SizedBox(width: 8),
//                   Text('${machine['name']} - ${machine['location']}'),
//                 ],
//               ),
//             )),
//           ],
//         ),
//       ),
//     );
//   }
// }

// class _DashboardViewState extends State<DashboardView> {
//   FirestoreService _firestoreService = FirestoreService();
//   List<Map<String, dynamic>> availableMachines = [];

//   @override
//   void initState() {
//     super.initState();
//     _fetchMachines();
//   }

//   // Fetch machines from Firestore and update state
//   void _fetchMachines() async {
//     List<Map<String, dynamic>> machines = await _firestoreService.fetchMachines();
//     setState(() {
//       availableMachines = machines;
//     });
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Card(
//       elevation: 5,
//       shape: RoundedRectangleBorder(
//         borderRadius: BorderRadius.circular(15.0),
//       ),
//       child: Padding(
//         padding: EdgeInsets.all(16.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: <Widget>[
//             Text(
//               'Total Machines: ${availableMachines.length}',
//               style: TextStyle(
//                 fontSize: 18,
//                 fontWeight: FontWeight.bold,
//               ),
//             ),
//             SizedBox(height: 10),
//             Text(
//               'Free Machines: ${availableMachines.length}', // Adjust based on logic
//               style: TextStyle(
//                 fontSize: 16,
//                 color: Colors.green,
//               ),
//             ),
//             SizedBox(height: 10),
//             Divider(),
//             availableMachines.isNotEmpty
//                 ? ListView.builder(
//                     shrinkWrap: true,
//                     physics: NeverScrollableScrollPhysics(),
//                     itemCount: availableMachines.length,
//                     itemBuilder: (context, index) {
//                       return Padding(
//                         padding: EdgeInsets.symmetric(vertical: 4.0),
//                         child: Row(
//                           children: [
//                             Icon(Icons.local_hospital, color: Colors.teal),
//                             SizedBox(width: 8),
//                             Text('${availableMachines[index]['name']} - ${availableMachines[index]['location']}'),
//                           ],
//                         ),
//                       );
//                     },
//                   )
//                 : Center(child: CircularProgressIndicator()), // Show loader while fetching
//           ],
//         ),
//       ),
//     );
//   }
// }

// class _DashboardViewState extends State<DashboardView> {
//   FirestoreService _firestoreService = FirestoreService();
//   List<Map<String, dynamic>> availableMachines = [];
//   List<Map<String, dynamic>> nonAvailableMachines = [];

//   @override
//   void initState() {
//     super.initState();
//     _fetchMachines();
//   }

//   // Fetch machines from Firestore and separate available/non-available
//   void _fetchMachines() async {
//     List<Map<String, dynamic>> machines = await _firestoreService.fetchMachines();
//     setState(() {
//       availableMachines = machines.where((m) => m['available'] == true).toList();
//       nonAvailableMachines = machines.where((m) => m['available'] == false).toList();
//     });
//   }

//   // Toggle availability of a machine
//   void _toggleAvailability(String id, bool isCurrentlyAvailable) async {
//     await _firestoreService.updateMachineAvailability(id, !isCurrentlyAvailable);
//     _fetchMachines(); // Refresh the list after updating
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.start,
//       children: [
//         Text(
//           'Available Machines: ${availableMachines.length}',
//           style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.green),
//         ),
//         SizedBox(height: 10),
//         _buildMachineList(availableMachines, true), // Display available machines

//         SizedBox(height: 20), // Separation between available and non-available

//         Text(
//           'Non-Available Machines: ${nonAvailableMachines.length}',
//           style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.red),
//         ),
//         SizedBox(height: 10),
//         _buildMachineList(nonAvailableMachines, false), // Display non-available machines
//       ],
//     );
//   }

//   Widget _buildMachineList(List<Map<String, dynamic>> machines, bool isAvailable) {
//     return machines.isNotEmpty
//         ? ListView.builder(
//             shrinkWrap: true,
//             physics: NeverScrollableScrollPhysics(),
//             itemCount: machines.length,
//             itemBuilder: (context, index) {
//               return Card(
//                 elevation: 3,
//                 margin: EdgeInsets.symmetric(vertical: 8),
//                 child: ListTile(
//                   leading: Icon(Icons.local_hospital, color: isAvailable ? Colors.teal : Colors.grey),
//                   title: Text('${machines[index]['name']} - ${machines[index]['location']}'),
//                   trailing: Switch(
//                     value: isAvailable,
//                     onChanged: (value) => _toggleAvailability(machines[index]['id'], isAvailable),
//                     activeColor: Colors.green,
//                     inactiveThumbColor: Colors.red,
//                   ),
//                 ),
//               );
//             },
//           )
//         : Center(child: Text('No machines found.'));
//   }
// }


// class schedule_screen extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     final FirestoreService firestoreService = FirestoreService();

//     return Padding(
//       padding: EdgeInsets.all(16.0),
//       child: Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: <Widget>[
//           Text(
//             'Schedule or Cancel a Machine',
//             style: Theme.of(context).textTheme.titleLarge?.copyWith(
//               color: Colors.blueAccent,
//               fontWeight: FontWeight.bold,
//             ),
//           ),
//           SizedBox(height: 20),
//           Expanded(
//             child: StreamBuilder<List<Map<String, dynamic>>>(
//               stream: firestoreService.listenToScheduledMachines(),
//               builder: (context, snapshot) {
//                 if (snapshot.connectionState == ConnectionState.waiting) {
//                   return Center(child: CircularProgressIndicator());
//                 } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
//                   return Center(child: Text('No scheduled machines.'));
//                 } else {
//                   final scheduledMachines = snapshot.data!;

//                   return ListView.builder(
//                     itemCount: scheduledMachines.length,
//                     itemBuilder: (context, index) {
//                       final machine = scheduledMachines[index];
//                       return schedule_card(
//                         machineId: machine['id'],
//                         machineName: machine['machineName'],
//                         location: machine['location'],
//                         patientName: machine['patientName'],
//                         patientNumber: machine['patientNumber'],
//                         onCancel: () => firestoreService.cancelSchedule(
//                           machine['id'],
//                           machine['machineId'],
//                         ),
//                       );
//                     },
//                   );
//                 }
//               },
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }